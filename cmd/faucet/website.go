// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.481kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdd\x73\xdb\x38\x92\x7f\x76\xfe\x8a\x5e\x5e\x76\x25\x5d\x4c\x52\xdf\x96\x65\x51\x5b\x91\xed\xec\xfa\xaa\x2e\x9b\xda\x64\xea\xf6\x6a\x76\x1e\x40\xa2\x25\x22\x26\x01\x0e\x00\x4a\xf6\xba\xf4\xbf\x5f\x01\xfc\x10\xf5\x61\x4f\x32\xf1\xd5\xd5\xf9\x41\x26\x80\x46\xf7\x0f\xdd\x0d\x74\xa3\xc9\xd9\x1f\x6e\xfe\x76\xfd\xe5\xbf\x3f\xdd\x42\xac\xd3\x64\xfe\x66\x66\xfe\x41\x42\xf8\x2a\x70\x90\x3b\xf3\x37\x67\xb3\x18\x09\x9d\xbf\x39\x3b\x9b\xa5\xa8\x09\x44\x31\x91\x0a\x75\xe0\xe4\x7a\xe9\x4e\x9c\xdd\x40\xac\x75\xe6\xe2\xaf\x39\x5b\x07\xce\x3f\xdc\x9f\xde\xbb\xd7\x22\xcd\x88\x66\x61\x82\x0e\x44\x82\x6b\xe4\x3a\x70\xee\x6e\x03\xa4\x2b\x6c\xcc\xe3\x24\xc5\xc0\x59\x33\xdc\x64\x42\xea\x06\xe9\x86\x51\x1d\x07\x14\xd7\x2c\x42\xd7\x36\xce\x81\x71\xa6\x19\x49\x5c\x15\x91\x04\x83\x9e\x33\x7f\x63\xf8\x68\xa6\x13\x9c\x3f\x3d\x79\x1f\x51\x6f\x84\xbc\xdf\x6e\xa7\xf0\x81\xe4\x11\xea\x99\x5f\x8c\x59\xb2\x84\xf1\x7b\x88\x25\x2e\x03\xc7\x80\x55\x53\xdf\x8f\x28\xff\xaa\xbc\x28\x11\x39\x5d\x26\x44\xa2\x17\x89\xd4\x27\x5f\xc9\x83\x9f\xb0\x50\xf9\x7a\xc3\xb4\x46\xe9\x86\x42\x68\xa5\x25\xc9\xfc\x81\x37\xf0\x2e\xfc\x48\x29\xbf\xee\xf3\x52\xc6\xbd\x48\x29\x07\x24\x26\x81\xa3\xf4\x63\x82\x2a\x46\xd4\x0e\xf8\xf3\xdf\x27\x77\x29\xb8\x76\xc9\x06\x95\x48\xd1\x1f\x7a\x17\x5e\xd7\x8a\x6c\x76\xbf\x2c\xd5\x88\x55\x91\x64\x99\x06\x25\xa3\x6f\x96\xfb\xf5\xd7\x1c\xe5\xa3\x3f\xf0\x7a\x5e\xaf\x6c\x58\x39\x5f\x95\x33\x9f\xf9\x05\xc3\xf9\x0f\xf1\x76\xb9\xd0\x8f\x7e\xdf\x1b\x7a\x3d\x3f\x23\xd1\x3d\x59\x21\xad\x24\x99\x21\xaf\xea\x7c\x35\xb9\xcf\xd9\xf0\xeb\xa1\x09\x5f\x43\x58\x2a\x52\xe4\xda\xfb\xaa\xfc\xbe\xd7\x9b\x78\xdd\xaa\xe3\x98\xbf\x15\x60\x8c\x66\x44\x9d\x79\x6b\x94\x9a\x45\x24\x71\x23\xe4\x1a\x25\x3c\x99\xde\xb3\x94\x71\x37\x46\xb6\x8a\xf5\x14\x7a\xdd\xee\x1f\xaf\x4e\xf5\xae\xe3\xa2\x9b\x32\x95\x25\xe4\x71\x0a\xcb\x04\x1f\x8a\x2e\x92\xb0\x15\x77\x99\xc6\x54\x4d\xa1\xe0\x6c\x07\xb6\x56\x66\x26\xc5\x4a\xa2\x52\xa5\xb0\x4c\x28\xa6\x99\xe0\x53\xe3\x51\x44\xb3\x35\x9e\xa2\x55\x19\xe1\x47\x13\x48\xa8\x44\x92\x6b\x3c\x00\x12\x26\x22\xba\x2f\xfa\xec\xfe\x6d\x2e\x22\x12\x89\x90\x53\xd8\xc4\xac\x9c\x06\x56\x10\x64\x12\x4b\xf6\x90\x11\x4a\x19\x5f\x4d\x61\x9c\x95\xeb\x81\x94\xc8\x15\xe3\x53\xe8\xee\xa6\xcc\xfc\x4a\x8d\x33\xbf\x38\xaa\xde\x9c\xcd\x42\x41\x1f\xad\x0d\x29\x5b\x43\x94\x10\xa5\x02\xe7\x40\xc5\xf6\x08\xda\x23\x30\x27\x0f\x61\xbc\x1a\xda\x1b\x93\x62\xe3\x80\x15\x14\x38\x05\x08\x37\x14\x5a\x8b\x74\x0a\x3d\x03\xaf\x9c\x72\xc0\x2f\x71\x93\x95\xdb\xeb\x57\x83\x67\xb3\xb8\x57\x31\xd1\xf8\xa0\x5d\x6b\x9f\xda\x32\xce\x7c\xc6\xaa\xb9\x4b\x02\x4b\xe2\x86\x44\xc7\x0e\x10\xc9\x88\x1b\x33\x4a\x91\x07\x8e\x96\x39\x1a\x3f\x62\x73\x68\x1e\x78\xf5\x79\x17\xf7\x2a\x24\x3e\x65\xeb\x72\x21\x8d\xc7\x83\x35\x3d\x0f\x7b\x02\xe5\x83\x58\x2e\x15\x6a\xb7\xb1\x8a\x06\x31\xe3\x59\xae\xdd\x95\x14\x79\x56\x8f\x9f\xcd\x6c\x2f\x30\x1a\x38\xb9\x4c\x9c\xf2\x88\xb7\x8f\xfa\x31\x2b\x17\xef\xd4\x4b\x15\x32\x75\x8d\xee\xa5\x48\x1c\xc8\x12\x12\x61\x2c\x12\x8a\x32\x70\xee\x2c\x9f\x47\x91\x4b\x58\x30\x4e\x78\x84\xf0\x39\x25\x52\xc3\x75\x4c\x18\x07\x42\xa9\xf1\x49\xcf\xf3\x1a\xb2\xad\x83\x1e\xa3\x73\x43\xcd\x77\x54\x67\xb3\x30\xd7\x5a\xd4\x84\xa1\xe6\x10\x6a\xee\x52\x5c\x92\x3c\xd1\x40\xa5\xc8\xa8\xd8\x70\x57\x8b\xd5\xca\x04\xb0\x02\x77\x31\xc9\x01\x4a\x34\x29\x87\x02\xa7\xa2\xad\x0c\x45\x54\x26\xb2\x3c\x2b\x4d\x55\x74\xe2\x43\x46\x38\x45\x6a\x0c\x9b\x28\x74\xe6\x7f\x61\x6b\x84\x14\x61\xf1\x71\x71\x76\x68\xf5\x88\x48\xd4\x6e\x93\xe5\x91\xed\x67\x7e\x01\xa5\x58\x10\x94\x7f\xb3\x3c\xa9\x38\xd5\x0b\x48\x91\xe7\xb0\xd7\x72\xa5\x39\x3a\x9c\xf9\xd3\x93\x24\x7c\x85\xf0\x96\xd1\x87\x73\x78\x4b\x52\x91\x73\x0d\xd3\x00\xbc\xf7\xf6\x51\x6d\xb7\x7b\xdc\x01\x66\x09\x9b\xcf\xc8\x4b\x1e\x0c\x82\x47\x09\x8b\xee\x03\x47\x33\x94\xc1\xd3\x93\x61\xbe\xdd\x5e\xa9\xc7\x34\x14\x49\xd0\x5a\x7c\x5c\xb4\xae\xe0\xe9\x89\x2d\xe1\xad\xf7\x77\x8c\x48\xa6\xa3\x98\x6c\xb7\x2b\x59\x3d\x7b\xf8\x80\x51\xae\xb1\xdd\x79\x7a\xc2\x44\xe1\x76\xab\xf2\x30\x65\xba\x5d\xf1\x32\xfd\x9c\x6e\xb7\x66\x01\x25\xe8\xed\x76\xe6\x93\xf9\xcc\x4f\xd8\xbc\x1c\xdc\x57\x8b\x9f\x27\x3b\xff\xf0\x8d\x83\xfc\x7f\x73\x97\x4f\xb8\x5a\x3d\x82\x16\xf7\xc8\xd5\xff\x91\xbb\x40\xed\x2f\x85\x31\xcf\xe1\x6d\x88\x59\x1f\xef\xf8\x52\x58\xaf\x59\x54\xad\xca\x71\xac\xe2\xbe\xc3\x65\x4a\x27\x79\x7a\x2a\x25\x6c\xb7\xbf\xcf\x55\x2c\x90\x76\x83\xcd\x9e\xcb\xd4\xa0\x4b\x37\xff\xac\xe5\x76\x0b\x0d\xea\xdf\xeb\x4b\xc5\x29\x6b\x01\x37\xf1\x9e\x38\x34\x57\x6e\xbd\x86\xd2\x39\x14\xd3\x78\x8f\x8f\x81\xf3\xf4\xd4\x9c\x5b\x8e\x46\x24\x49\x42\x62\x55\x64\x17\x58\x4f\xfa\x17\x1a\xa7\x5d\x33\x65\xb3\xec\x79\x85\x60\x07\xfb\x1b\xa3\xc0\x41\x64\xd3\x22\x9b\xc2\xa0\xdf\x08\x6b\xa7\x02\xc4\xf8\x20\x40\x0c\x4e\x12\x67\x84\x63\x02\xf6\xd7\x55\x29\x49\xaa\xe7\x72\xeb\x34\x0e\xee\xc3\x49\xae\x09\xe2\x35\xb4\x3a\x19\xe8\x5e\x81\x58\xa3\x5c\x26\x62\x33\x05\x92\x6b\x71\x05\x29\x79\xa8\x13\xa2\x41\xb7\xdb\xc4\x6d\x6e\x07\x24\x4c\xd0\x06\x23\x89\xbf\xe6\xa8\xb4\xaa\x43\x4f\x31\x64\x7f\x4d\x04\xa2\xc8\x15\xd2\x03\x6d\x18\x89\x46\xb5\x96\xaa\x61\xfa\x5a\x99\x27\xb1\x2f\x85\xa8\x73\x8c\x26\x8c\x92\x75\x23\x1d\x72\xe6\x33\x2d\x77\x74\x67\x33\x4d\xbf\x2b\x47\x90\xe6\x0e\xf0\x5c\x8a\x50\x1c\x6f\x66\xed\x19\xa2\x2c\x12\x50\xe3\xb2\x60\x9b\x33\x5f\xd3\x1f\x90\x6c\x9c\x30\x24\x0a\xbf\x45\xbc\x4d\x05\x77\xe2\x6d\xf3\x47\xe5\xc7\x48\xa4\x0e\x91\xe8\x6f\x01\xb0\xcc\x39\x6d\xac\x7f\xf1\x71\xf1\xa3\xe2\x73\xce\xd6\x28\x15\xd3\x8f\xdf\x2a\x1f\xe9\x0e\x40\xd1\xde\x87\x30\xf3\xb5\x7c\xd9\xd3\x9a\x8d\x57\xda\xda\xbf\x95\xb1\x0e\xe6\x7f\x15\x1b\xa0\x02\x15\xe8\x98\x29\x30\xf9\xe6\x9f\x67\x7e\x3c\xa8\x49\x32\x73\xc2\xef\xdf\x6f\xf1\x21\x4b\x84\x44\xe9\x85\x45\xda\xe6\x09\xb9\xf2\x95\x49\xdd\x5c\x8d\x4a\x73\xd4\x7e\x99\xbc\xf9\xdd\x87\x71\x84\x13\xfa\xbe\x3f\xb9\xed\x2f\x27\xe3\xe1\xb0\xdf\x9d\x0c\xbb\xd1\x87\x8b\xe1\xf0\x62\x88\x1f\x96\xa3\xe5\xcd\xa4\x7b\x3b\x1e\x2d\x26\xce\x7c\xf1\xe5\xda\x9c\xce\xe7\x3f\x26\x8f\x8e\xc7\xd1\x78\x31\xfc\xd0\x0d\x71\x72\x7d\x3b\x0a\x07\x97\x37\xa3\xfe\x6d\xf7\x03\xed\x0d\x86\xc3\x68\x30\xb9\xbc\xec\x5f\x2e\x06\x17\x13\x67\x7e\xfb\xe5\xaf\xaf\x20\x8f\x4c\x06\xa3\x8b\xd1\xf0\xb2\x7b\x73\x41\x97\xc3\xdb\xfe\x87\xe1\x45\x78\x71\x33\x98\xe0\x72\x30\xea\x91\xfe\x45\xbf\x1f\xbd\x1f\x8e\xc2\x4b\x67\xfe\x8f\xbf\x7f\x7a\x05\x79\x48\xfb\xc3\x65\x34\x18\xd3\x11\x62\xbf\xd7\x43\xd2\x1f\x91\x49\xb7\x3f\xb8\x5c\x86\x93\x68\x18\x2d\xe9\xa4\xbb\xec\xf5\x11\x9d\xf9\xe2\xa7\xcf\x37\xaf\x20\x70\x30\xb8\x18\xf7\xba\xb4\x7f\x11\x8d\x27\xfd\xdb\xc1\xf0\xe2\xfa\x32\xba\x19\x77\x17\x37\xc3\x70\x10\xf6\xba\x17\xd7\x97\x74\x30\xa4\x37\xd4\x99\xff\xf4\xf9\xe6\xcb\x2b\x08\x1c\x0f\x47\xc3\xe1\xe5\xf8\x12\xe9\xc5\xed\x62\x39\x5a\x76\x27\x83\xf1\xc5\x65\x7f\x30\x18\xf4\x47\x83\xd1\xf8\x36\xbc\xbd\x18\x4c\x2e\x07\x5d\x2b\xf0\x35\x5c\xe6\xf6\x7a\x44\xaf\xc3\xd1\x4d\xb8\x1c\x2e\x7a\xbd\xe1\xf5\x25\xed\x7e\x18\x8f\x16\xd1\xf5\xfb\x70\x78\x79\x7b\x3d\x1a\x7e\x18\xbf\xef\x4e\xc6\x17\xce\xfc\xe6\xfd\x9d\x91\x07\x44\x22\x30\xa5\x72\xa4\x40\x14\x2c\x6e\x3f\xf5\xbb\x45\xfe\xe6\xcd\xfc\xac\xb1\x75\xe0\xda\x24\x3f\xa0\x05\xac\x50\x03\x45\x4d\x58\x02\x24\x14\xb9\x86\x23\xc8\x2b\xa6\xe3\x3c\xb4\x25\x87\x12\xb4\x1b\x99\x8b\x90\xbf\xb8\xfd\xa4\xfc\x30\x11\xa1\x9f\x12\xa5\x51\xfa\x56\x9e\x97\x52\x67\x6e\x9f\x0c\xa2\xa6\xdc\xa3\x24\x65\x86\xe9\xfc\x4b\x8c\xb0\xb4\xb7\x48\x60\x0a\x64\xce\x39\xe3\x2b\xa8\xd3\x0b\x90\x78\x5d\x90\x43\x26\x85\xc6\xc8\x5c\xfd\x81\xac\x08\xe3\x4a\x43\x28\xb4\xf2\x66\x3e\xa6\xdf\x90\x7e\xd4\x4f\xe5\xc3\xae\xd6\x62\x87\x7d\x1f\xfe\x92\x88\x90\x24\xb0\x36\xc7\x6a\x98\x98\x93\x47\x80\xb9\x13\x82\x8e\x11\xa2\x5c\x4a\xe4\x1a\x94\x26\x3a\x57\x20\x96\xb6\xb7\x40\x6e\xe6\xaf\x89\x04\xa2\x35\xa6\x99\x86\xa0\xac\x14\x98\x3e\x85\x72\x5d\xd6\x3f\x4c\xd3\x5c\x50\xf6\xc7\x8b\xf4\xd3\x71\xea\x9e\x2a\x5f\x80\x00\x7e\xfe\xe5\xea\x4d\x09\xee\x06\x97\x8c\x23\x10\x73\x84\x17\x4a\xd0\x31\xd1\x10\x49\x24\x1a\x15\x44\x89\x50\xb9\x2c\x30\x9b\x44\x1a\x0c\xee\x8a\x53\xc5\xd9\x0c\x64\x56\x7e\xc5\xa4\x1d\x13\x15\x77\xca\xd2\x87\x44\x9d\x4b\xbe\x1b\xab\xfa\xcf\x96\x42\x42\xdb\x30\x60\x41\xf7\x0a\xd8\xac\xe2\xeb\x25\xc8\x57\x3a\xbe\x02\xf6\xee\x5d\x4d\x7c\xc6\x96\xd0\xae\x28\x7e\x66\xbf\x78\xfa\xc1\x33\x52\x20\x08\xa0\x29\xcd\x0a\x2c\xf9\xa8\x2c\x61\x11\xb6\xd9\x39\xf4\x3a\x57\xd5\x68\x28\x91\xdc\x57\xad\xd2\xb2\xc5\x3f\xfb\xbb\xbd\xda\xd7\x8c\x35\xc7\x9e\x6e\x8a\xb4\x55\x01\x81\x15\x53\x1a\x72\x99\x18\xed\x18\xba\xc2\x28\xb5\x09\x2c\x5d\x53\x2b\x47\x9e\x5a\x3e\x94\x5e\x56\x2d\xa1\x60\xe3\x29\xe4\xb4\xfd\x1f\x9f\xff\xf6\xd1\x53\x5a\x32\xbe\x62\xcb\xc7\xf6\x53\x2e\x93\x29\xbc\x6d\x3b\xff\x96\xcb\xc4\xe9\xfc\xdc\xfd\xc5\x5b\x93\x24\xc7\xf3\xd2\xe0\x53\xa8\xee\x33\xc6\x23\xa6\xf6\xf7\x48\xea\x39\x94\x8f\x53\xd8\x07\xb0\xed\x74\xae\x4e\xa7\xfc\x8d\x7b\x8a\x44\x85\xba\x6d\x08\xeb\xad\x71\xa8\x33\x02\x29\xea\x58\x50\xa3\x17\x89\x91\xe0\x1c\x23\x0d\x79\x26\x78\xa9\x22\x48\x84\x52\x3b\xc7\xac\x28\x82\x63\x27\x29\xe9\x03\xe0\xb8\x81\xff\xc2\xf0\xb3\x88\xee\x51\xb7\xdb\xed\x0d\xe3\x54\x6c\xbc\x44\x44\xc4\x4c\xf0\xcc\x36\x16\x91\x48\x20\x08\x02\x28\x0f\x19\xa7\x03\x7f\x06\x67\xa3\xcc\x71\xe3\xc0\xd4\x3c\x9a\xa7\x0e\xbc\x83\xc3\xe9\xb1\x50\x1a\xde\x81\xe3\x17\x5b\xcf\xb5\x67\xa7\x4f\x32\xe6\x74\x8a\xbd\x52\x59\x45\xf0\x14\x95\x22\x2b\x6c\xa2\xc5\x35\x72\x5d\x7b\xa0\x59\x54\xaa\x56\x10\x80\xb5\x5e\x46\xa4\xc2\x82\xc4\x33\x59\x66\xe5\x8a\xc6\xa1\x2d\x59\x10\x00\xcf\x93\x64\xe7\xc1\xc5\x8e\xb9\xaa\x7c\x73\x8f\xdc\xb3\xb9\x1f\xfc\x21\x08\xc0\x24\x5d\x46\xdf\x74\x37\xd3\x78\x46\x91\x1c\x76\x3c\x93\xf7\xed\x66\x74\xae\x9a\xae\xbe\xc7\x0d\xe9\x6f\xb1\x43\x7a\xc8\x0f\xe9\x33\x0c\x6d\x2e\xfe\x12\xbf\x22\x77\x6f\xb0\xb3\x1d\xcf\x70\xe3\x79\x1a\xa2\x7c\x89\x5d\x91\x8b\x97\xec\xac\xaa\xef\xb8\x6e\xcc\x3d\x87\xde\xb8\xf3\x0c\x77\x94\x52\x3c\xcb\x9c\x0b\xfd\xd8\x7e\x4a\xc8\xa3\xc8\xf5\x14\x5a\x5a\x64\xd7\x36\x79\x6e\x9d\x83\x91\x35\x85\x9a\xc3\xb9\xad\x90\x4c\xa1\x65\x5b\x66\x9c\xa5\x68\x67\x8d\xba\xdd\xee\x39\x54\xe5\xe6\x05\x31\x3b\x52\xe6\xb8\x7d\x06\x8f\xca\xa3\x08\xd5\xb3\xda\xfb\x26\x44\x25\x8f\x1a\x53\xd9\xfe\x01\x54\x75\xe0\xd8\x83\x05\x7f\xfa\x13\x1c\x8d\xee\xbb\xb1\xef\xc3\x7f\x12\x79\x0f\xf6\x9e\x2c\x71\xcd\x44\xae\x76\x61\x28\x65\x4a\x99\x98\x4c\x14\x50\xc1\xb1\x9c\xf3\x7d\x31\xe1\x08\x63\x49\x06\x73\xe8\x1e\x02\x34\x67\x65\x23\x66\x9c\x08\x25\x0d\xbe\xfb\x51\xe2\x6c\xdb\x94\xb7\x37\x93\xa5\x08\x7f\x08\xc0\x71\x9a\x93\x8f\x28\x0c\x41\xcd\xec\x4c\xa1\xfe\x52\xd8\xa2\x5d\x86\xce\x53\x81\xad\x73\x6e\xae\xff\xdd\xce\x11\x88\xed\x4e\xbd\xef\xb3\x0c\x39\x05\xc2\x1f\xed\xf9\x58\xeb\x96\x71\x2d\x40\xe4\xe6\x9c\x8d\x48\x02\x91\x48\x92\x22\xc5\x29\xa7\x1a\x05\x47\x22\x4d\x05\x87\x00\xdc\xde\xd5\x89\x10\xdb\xd0\x64\x63\x69\x87\xe6\x39\xa1\xfb\x43\x13\xed\xeb\xec\x80\xd8\xed\xed\x19\x65\xcf\x5e\xa7\x0d\x73\x56\xe3\x66\x3b\x8d\x1e\x98\x6b\x67\xaf\x43\x9d\x35\xf0\x17\x7c\xde\xf5\xbe\x71\x19\xf5\x70\x96\xab\xb8\x7d\x00\xb4\x73\x75\x6c\x9b\x3b\x8d\x92\x68\xb4\xf5\x1d\x6b\x0b\xe4\x9a\x49\x3c\x32\x09\x10\x6e\x52\x2a\x57\x22\xa7\x28\xab\x7c\x83\x9a\xad\x61\xef\xce\x7b\x26\xb3\x6f\x93\xf7\xdc\xe9\x3b\x37\x8c\xcd\xd7\x04\x47\x00\x80\x83\x4d\x60\x1d\x75\xcf\x53\x0d\x31\x26\x24\x53\x48\x21\x80\xe2\xed\x5f\xbb\xe3\xe5\x9c\x3d\xb4\x3b\x6e\xd9\x3e\xe4\x51\x8d\x97\x61\xd3\x5a\xac\x80\xfd\x2e\x00\x67\xa6\x25\x30\x1a\xb4\x1c\x78\x77\x6a\x0b\x9a\x10\xdc\x9a\xef\x10\x34\xa7\x02\xcc\x34\x9d\xdb\x1b\x7e\x51\x06\xf8\xa7\x13\x92\xe8\x7e\x25\x45\xce\xe9\xd4\xe4\x61\xed\x23\xb6\x64\x4d\x34\x91\x96\x6b\xe7\x0a\x76\xe4\xb6\xdc\x38\x85\xc8\x18\xe7\x0a\x8a\x02\x96\x2d\x24\x40\x5d\x7a\xb3\xad\x50\x48\x8a\xd2\x95\x84\xb2\x5c\x4d\x61\x98\x3d\x5c\xfd\xb3\x2a\x4d\xda\x72\xc7\x8b\x50\x33\x89\xf3\x23\x44\x51\x64\x5f\x4d\xbc\x03\x67\xe6\x1b\x82\xdf\x62\x53\x2f\xb6\xf9\xd6\x11\x4e\x14\x75\xa0\x7e\x27\x58\xf6\xa7\x8c\xd2\x04\x0d\xe0\x1d\x7b\xb3\x19\x8d\xfd\x9b\x5b\x6a\x5f\x24\x94\xd5\x9c\xdd\x9c\x2d\x60\xa2\xf0\x85\x09\x75\x61\xa8\x65\x1c\xc0\x35\x4b\x66\x56\xe7\x65\x29\xc6\x76\xcb\x96\xd5\x45\xf9\x0e\x99\xe6\xd2\x26\x5e\x6d\xb7\x74\xb0\x73\x68\x29\x93\x08\x52\xd5\xea\x78\x71\x9e\x12\xce\xfe\x85\x6d\x13\x97\x3a\x85\xae\x6c\xa5\xc9\x39\x3e\x92\x8f\xc0\xec\x4a\x40\xad\x2a\xc6\xb5\x4a\x25\xb6\x2a\xeb\x1a\x43\x36\xde\xbf\xb6\xbe\x53\x43\xa7\xa5\xb8\x21\x91\xd0\x6c\xb8\x55\xf0\x05\x29\x8c\xf4\x6a\x2c\x24\xb2\x55\x54\xd9\x6c\xf2\xce\xc5\x26\x68\x0d\xba\x35\xc8\xc2\xd0\xd6\xce\xad\xd2\xd7\x8e\x8c\x61\x50\x56\x5b\x73\x0e\x83\xee\x6b\xa0\xa5\x84\xaf\xf0\x70\x05\x5a\xb2\xcc\x5c\xfb\x23\xcd\xd6\xf8\xbf\xb0\x90\x57\x50\xf2\x77\x43\x34\x7e\x58\x29\xcf\xba\xe9\x1e\x5e\x33\x5a\xeb\xf6\xdf\xcd\x7e\x03\xdf\x6a\xf8\x1d\x38\x27\x17\xf2\xac\x27\x1e\x10\x1e\x6c\xed\xe7\xf7\xbd\x2d\x9d\x3a\x87\x31\xc5\x64\xbb\x75\xd1\xbf\xe3\xc5\x3a\x4d\xda\xce\x4c\xdb\xaf\x03\x0c\xe6\x9a\x83\x65\x50\x74\xef\xa7\x74\xdb\xfd\x8b\x8c\xb9\xdc\xe3\xc1\xa5\x0b\x1a\xc9\x49\x7d\x31\xab\x32\x11\xd8\xee\x3e\xa2\xf0\x7d\xf8\xac\x89\xd4\x40\xe0\xa7\x3b\xc8\x33\x4a\xb4\x89\x5e\x02\x4c\x7c\xb4\x51\xac\xfe\xca\x22\x24\x52\xc1\x52\xc8\x0d\x91\x14\x72\xae\x59\x62\xc6\x1f\x6d\x55\xa9\x4a\xfd\x14\xea\x3b\x73\x8a\xad\x49\xd2\x3e\xba\x04\xbe\x6d\xb7\xbc\xa6\xc9\x5b\x1d\x0f\x49\x14\x1f\x13\xda\x88\x55\xcb\x0d\xe0\xa3\xbd\x02\xb4\xdf\xb6\x75\xcc\x54\xc7\x23\x5a\xcb\x76\x6b\xcf\x19\x5a\x1d\x63\xd7\x5e\xe3\x4a\x56\x4f\x9f\xed\x6d\xab\x97\x78\xec\x92\xe9\x3a\x11\xa8\xc8\x23\xa5\xda\x85\x5f\xb5\xce\x1b\xbc\xf7\xdd\xaa\xf5\xc7\x56\x6d\xa8\xdd\xf6\xde\xad\x23\x38\x89\x64\x8f\x75\xcb\xec\xb2\xd6\x91\x78\x42\xe9\xb5\xd9\x3f\x6d\xe7\xc4\x4e\x3f\xf4\x8e\x4e\xad\xec\xe2\xbc\x7e\x51\xcb\x8c\x53\x7c\x78\x4e\xc5\x8c\xb6\x3a\x9e\xca\xc3\xa2\x70\xd1\x1e\xd5\x17\xb0\x8a\xcc\x3a\xef\x61\x28\x38\x4a\x28\x8c\x88\xfd\xa4\xc2\x3d\x48\x42\x5e\x88\x1a\xa5\xc8\x62\x55\xdb\x73\xa3\xf0\x6e\xa7\xae\x7b\xdd\x2a\x93\x5c\x31\x15\x03\x81\x0d\x86\xca\x96\x15\xa0\xf4\x77\x5b\xea\x29\x4a\x3a\xef\x3f\xdd\x35\xca\x3a\xf5\x8e\x68\x5b\xee\xf5\x07\x50\xa7\x8a\x26\x27\xbf\xb8\xda\x6c\x36\xde\x4a\x88\x55\x52\x7c\x6b\x55\x57\x55\x7c\x92\x31\xef\xab\x72\x80\xa8\x47\x1e\x01\xc5\x25\xca\x79\x83\x7d\x59\x6a\x99\xf9\xc5\xb7\x40\x33\xbf\xf8\xc0\xf1\x7f\x02\x00\x00\xff\xff\x07\xbf\xf9\xed\xf1\x28\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0xf8, 0x18, 0x8e, 0x34, 0xbe, 0x8b, 0x7e, 0x66, 0xa1, 0x4b, 0xa9, 0xb, 0x95, 0x7e, 0xd, 0xd8, 0x90, 0x9e, 0x8e, 0xa7, 0xce, 0x61, 0x87, 0xbe, 0xae, 0x86, 0xcc, 0x3c, 0x89, 0x8b, 0xb3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.376kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x73\xdb\x38\x92\xff\xec\xfc\x15\x3d\xbc\xec\x4a\xba\x98\xa4\xde\x96\x65\x51\x5b\x91\xed\xec\xfa\xaa\x2e\x9b\xda\x64\xea\xf6\x6a\x76\x3e\x80\x44\x4b\x44\x4c\x02\x1c\x00\x94\xec\x71\xe9\x7f\xbf\x02\xf8\x10\xf5\xb0\x27\xaf\xab\xab\xcb\x07\x87\x04\x1a\xdd\x3f\x74\x37\xd0\x0f\x6a\xf6\xd3\xcd\xdf\xaf\x3f\xfd\xf7\x87\x5b\x88\x75\x9a\xcc\x5f\xcd\xcc\x7f\x90\x10\xbe\x0a\x1c\xe4\xce\xfc\xd5\xd9\x2c\x46\x42\xe7\xaf\xce\xce\x66\x29\x6a\x02\x51\x4c\xa4\x42\x1d\x38\xb9\x5e\xba\x13\x67\x37\x11\x6b\x9d\xb9\xf8\x5b\xce\xd6\x81\xf3\x4f\xf7\xe7\xb7\xee\xb5\x48\x33\xa2\x59\x98\xa0\x03\x91\xe0\x1a\xb9\x0e\x9c\xbb\xdb\x00\xe9\x0a\x1b\xeb\x38\x49\x31\x70\xd6\x0c\x37\x99\x90\xba\x41\xba\x61\x54\xc7\x01\xc5\x35\x8b\xd0\xb5\x2f\xe7\xc0\x38\xd3\x8c\x24\xae\x8a\x48\x82\x41\xcf\x99\xbf\x32\x7c\x34\xd3\x09\xce\x9f\x9e\xbc\xf7\xa8\x37\x42\xde\x6f\xb7\x53\x78\x47\xf2\x08\xf5\xcc\x2f\xe6\x2c\x59\xc2\xf8\x3d\xc4\x12\x97\x81\x63\xc0\xaa\xa9\xef\x47\x94\x7f\x56\x5e\x94\x88\x9c\x2e\x13\x22\xd1\x8b\x44\xea\x93\xcf\xe4\xc1\x4f\x58\xa8\x7c\xbd\x61\x5a\xa3\x74\x43\x21\xb4\xd2\x92\x64\xfe\xc0\x1b\x78\x17\x7e\xa4\x94\x5f\x8f\x79\x29\xe3\x5e\xa4\x94\x03\x12\x93\xc0\x51\xfa\x31\x41\x15\x23\x6a\x07\xfc\xf9\xb7\xc9\x5d\x0a\xae\x5d\xb2\x41\x25\x52\xf4\x87\xde\x85\xd7\xb5\x22\x9b\xc3\x2f\x4b\x35\x62\x55\x24\x59\xa6\x41\xc9\xe8\x8b\xe5\x7e\xfe\x2d\x47\xf9\xe8\x0f\xbc\x9e\xd7\x2b\x5f\xac\x9c\xcf\xca\x99\xcf\xfc\x82\xe1\xfc\xbb\x78\xbb\x5c\xe8\x47\xbf\xef\x0d\xbd\x9e\x9f\x91\xe8\x9e\xac\x90\x56\x92\xcc\x94\x57\x0d\xfe\x30\xb9\xcf\xd9\xf0\xf3\xa1\x09\x7f\x84\xb0\x54\xa4\xc8\xb5\xf7\x59\xf9\x7d\xaf\x37\xf1\xba\xd5\xc0\x31\x7f\x2b\xc0\x18\xcd\x88\x3a\xf3\xd6\x28\x35\x8b\x48\xe2\x46\xc8\x35\x4a\x78\x32\xa3\x67\x29\xe3\x6e\x8c\x6c\x15\xeb\x29\xf4\xba\xdd\x3f\x5d\x9d\x1a\x5d\xc7\xc5\x30\x65\x2a\x4b\xc8\xe3\x14\x96\x09\x3e\x14\x43\x24\x61\x2b\xee\x32\x8d\xa9\x9a\x42\xc1\xd9\x4e\x6c\xad\xcc\x4c\x8a\x95\x44\xa5\x4a\x61\x99\x50\x4c\x33\xc1\xa7\xc6\xa3\x88\x66\x6b\x3c\x45\xab\x32\xc2\x8f\x16\x90\x50\x89\x24\xd7\x78\x00\x24\x4c\x44\x74\x5f\x8c\xd9\xf3\xdb\xdc\x44\x24\x12\x21\xa7\xb0\x89\x59\xb9\x0c\xac\x20\xc8\x24\x96\xec\x21\x23\x94\x32\xbe\x9a\xc2\x38\x2b\xf7\x03\x29\x91\x2b\xc6\xa7\xd0\xdd\x2d\x99\xf9\x95\x1a\x67\x7e\x71\x55\xbd\x3a\x9b\x85\x82\x3e\x5a\x1b\x52\xb6\x86\x28\x21\x4a\x05\xce\x81\x8a\xed\x15\xb4\x47\x60\x6e\x1e\xc2\x78\x35\xb5\x37\x27\xc5\xc6\x01\x2b\x28\x70\x0a\x10\x6e\x28\xb4\x16\xe9\x14\x7a\x06\x5e\xb9\xe4\x80\x5f\xe2\x26\x2b\xb7\xd7\xaf\x26\xcf\x66\x71\xaf\x62\xa2\xf1\x41\xbb\xd6\x3e\xb5\x65\x9c\xf9\x8c\x55\x6b\x97\x04\x96\xc4\x0d\x89\x8e\x1d\x20\x92\x11\x37\x66\x94\x22\x0f\x1c\x2d\x73\x34\x7e\xc4\xe6\xd0\xbc\xf0\xea\xfb\x2e\xee\x55\x48\x7c\xca\xd6\xe5\x46\x1a\x8f\x07\x7b\x7a\x1e\xf6\x04\xca\x07\xb1\x5c\x2a\xd4\x6e\x63\x17\x0d\x62\xc6\xb3\x5c\xbb\x2b\x29\xf2\xac\x9e\x3f\x9b\xd9\x51\x60\x34\x70\x72\x99\x38\xe5\x15\x6f\x1f\xf5\x63\x56\x6e\xde\xa9\xb7\x2a\x64\xea\x1a\xdd\x4b\x91\x38\x90\x25\x24\xc2\x58\x24\x14\x65\xe0\xdc\x59\x3e\x8f\x22\x97\xb0\x60\x9c\xf0\x08\xe1\x63\x4a\xa4\x86\xeb\x98\x30\x0e\x84\x52\xe3\x93\x9e\xe7\x35\x64\x5b\x07\x3d\x46\xe7\x86\x9a\xef\xa8\xce\x66\x61\xae\xb5\xa8\x09\x43\xcd\x21\xd4\xdc\xa5\xb8\x24\x79\xa2\x81\x4a\x91\x51\xb1\xe1\xae\x16\xab\x95\x09\x60\x05\xee\x62\x91\x03\x94\x68\x52\x4e\x05\x4e\x45\x5b\x19\x8a\xa8\x4c\x64\x79\x56\x9a\xaa\x18\xc4\x87\x8c\x70\x8a\xd4\x18\x36\x51\xe8\xcc\xff\xca\xd6\x08\x29\xc2\xe2\xfd\xe2\xec\xd0\xea\x11\x91\xa8\xdd\x26\xcb\x23\xdb\xcf\xfc\x02\x4a\xb1\x21\x28\xff\xcd\xf2\xa4\xe2\x54\x6f\x20\x45\x9e\xc3\xde\x9b\x2b\xcd\xd5\xe1\xcc\x9f\x9e\x24\xe1\x2b\x84\xd7\x8c\x3e\x9c\xc3\x6b\x92\x8a\x9c\x6b\x98\x06\xe0\xbd\xb5\x8f\x6a\xbb\xdd\xe3\x0e\x30\x4b\xd8\x7c\x46\x5e\xf2\x60\x10\x3c\x4a\x58\x74\x1f\x38\x9a\xa1\x0c\x9e\x9e\x0c\xf3\xed\xf6\x4a\x3d\xa6\xa1\x48\x82\xd6\xe2\xfd\xa2\x75\x05\x4f\x4f\x6c\x09\xaf\xbd\x7f\x60\x44\x32\x1d\xc5\x64\xbb\x5d\xc9\xea\xd9\xc3\x07\x8c\x72\x8d\xed\xce\xd3\x13\x26\x0a\xb7\x5b\x95\x87\x29\xd3\xed\x8a\x97\x19\xe7\x74\xbb\x35\x1b\x28\x41\x6f\xb7\x33\x9f\xcc\x67\x7e\xc2\xe6\xe5\xe4\xbe\x5a\xfc\x3c\xd9\xf9\x87\x6f\x1c\xe4\xff\x9b\xbb\x7c\xc0\xd5\xea\x11\xb4\xb8\x47\xae\xfe\x8f\xdc\x05\x6a\x7f\x29\x8c\x79\x0e\xaf\x43\xcc\xfa\x78\xc7\x97\xc2\x7a\xcd\xa2\x7a\xab\x1c\xc7\x2a\xee\x2b\x5c\xa6\x74\x92\xa7\xa7\x52\xc2\x76\xfb\x6d\xae\x62\x81\xb4\x1b\x6c\xf6\x5c\xa6\x06\x5d\xba\xf9\x47\x2d\xb7\x5b\x68\x50\x7f\xab\x2f\x15\xb7\xac\x05\xdc\xc4\x7b\xe2\xd2\x5c\xb9\xf5\x1e\x4a\xe7\x50\x4c\xe3\x3d\x3e\x06\xce\xd3\x53\x73\x6d\x39\x1b\x91\x24\x09\x89\x55\x91\xdd\x60\xbd\xe8\x77\x34\x4e\xbb\x66\xca\x66\xd9\xf3\x0a\xc1\x0e\xf6\x17\x46\x81\x83\xc8\xa6\x45\x36\x85\x41\xbf\x11\xd6\x4e\x05\x88\xf1\x41\x80\x18\x9c\x24\xce\x08\xc7\x04\xec\x5f\x57\xa5\x24\xa9\x9e\xcb\xa3\xd3\xb8\xb8\x0f\x17\xb9\x26\x88\xd7\xd0\xea\x64\xa0\x7b\x05\x62\x8d\x72\x99\x88\xcd\x14\x48\xae\xc5\x15\xa4\xe4\xa1\x4e\x88\x06\xdd\x6e\x13\xb7\xa9\x0e\x48\x98\xa0\x0d\x46\x12\x7f\xcb\x51\x69\x55\x87\x9e\x62\xca\xfe\x35\x11\x88\x22\x57\x48\x0f\xb4\x61\x24\x1a\xd5\x5a\xaa\x86\xe9\x6b\x65\x9e\xc4\xbe\x14\xa2\xce\x31\x9a\x30\x4a\xd6\x8d\x74\xc8\x99\xcf\xb4\xdc\xd1\x9d\xcd\x34\xfd\xaa\x1c\x41\x9a\x1a\xe0\xb9\x14\xa1\xb8\xde\xcc\xde\x33\x44\x59\x24\xa0\xc6\x65\xc1\xbe\xce\x7c\x4d\xbf\x43\xb2\x71\xc2\x90\x28\xfc\x12\xf1\x36\x15\xdc\x89\xb7\xaf\xdf\x2b\x3f\x46\x22\x75\x88\x44\x7f\x09\x80\x65\xce\x69\x63\xff\x8b\xf7\x8b\xef\x15\x9f\x73\xb6\x46\xa9\x98\x7e\xfc\x52\xf9\x48\x77\x00\x8a\xf7\x7d\x08\x33\x5f\xcb\x97\x3d\xad\xf9\xf2\x83\x8e\xf6\x1f\x65\xac\x83\xf9\xdf\xc4\x06\xa8\x40\x05\x3a\x66\x0a\x4c\xbe\xf9\x97\x99\x1f\x0f\x6a\x92\xcc\xdc\xf0\xfb\xf5\xad\x46\xa5\x39\x6a\x2f\x54\x91\x8a\x08\x2f\xaa\xa4\x22\x5b\xf3\xbb\x0f\xe3\x08\x27\xf4\x6d\x7f\x72\xdb\x5f\x4e\xc6\xc3\x61\xbf\x3b\x19\x76\xa3\x77\x17\xc3\xe1\xc5\x10\xdf\x2d\x47\xcb\x9b\x49\xf7\x76\x3c\x5a\x4c\x9c\xf9\xe2\xd3\xb5\xb9\x8e\xcf\xbf\x52\x00\x1d\x8f\xa3\xf1\x62\xf8\xae\x1b\xe2\xe4\xfa\x76\x14\x0e\x2e\x6f\x46\xfd\xdb\xee\x3b\xda\x1b\x0c\x87\xd1\x60\x72\x79\xd9\xbf\x5c\x0c\x2e\x26\xce\xfc\xf6\xd3\xdf\xbe\x45\x00\x99\x0c\x46\x17\xa3\xe1\x65\xf7\xe6\x82\x2e\x87\xb7\xfd\x77\xc3\x8b\xf0\xe2\x66\x30\xc1\xe5\x60\xd4\x23\xfd\x8b\x7e\x3f\x7a\x3b\x1c\x85\x97\xce\xfc\x9f\xff\xf8\xf0\x2d\x02\x90\xf6\x87\xcb\x68\x30\xa6\x23\xc4\x7e\xaf\x87\xa4\x3f\x22\x93\x6e\x7f\x70\xb9\x0c\x27\xd1\x30\x5a\xd2\x49\x77\xd9\xeb\x23\x3a\xf3\xc5\xcf\x1f\x6f\xbe\x45\xc2\x60\x70\x31\xee\x75\x69\xff\x22\x1a\x4f\xfa\xb7\x83\xe1\xc5\xf5\x65\x74\x33\xee\x2e\x6e\x86\xe1\x20\xec\x75\x2f\xae\x2f\xe9\x60\x48\x6f\xa8\x33\xff\xf9\xe3\xcd\xa7\x6f\x91\x30\x1e\x8e\x86\xc3\xcb\xf1\x25\xd2\x8b\xdb\xc5\x72\xb4\xec\x4e\x06\xe3\x8b\xcb\xfe\x60\x30\xe8\x8f\x06\xa3\xf1\x6d\x78\x7b\x31\x98\x5c\x0e\xba\x56\xc2\x37\xd9\xf9\xf6\x7a\x44\xaf\xc3\xd1\x4d\xb8\x1c\x2e\x7a\xbd\xe1\xf5\x25\xed\xbe\x1b\x8f\x16\xd1\xf5\xdb\x70\x78\x79\x7b\x3d\x1a\xbe\x1b\xbf\xed\x4e\xc6\x17\xce\xfc\xe6\xed\x9d\x11\x00\x44\x22\x30\xa5\x72\xa4\x40\x14\x2c\x6e\x3f\xf4\xbb\x45\x5a\xe5\xcd\xfc\xac\xe1\xd1\x70\x6d\x72\x12\xd0\x02\x56\xa8\x81\xa2\x26\x2c\x01\x12\x8a\x5c\xc3\x11\xc6\x15\xd3\x71\x1e\x5a\x68\x61\x51\xa5\xb8\x91\xa9\x4f\xfc\xc5\xed\x07\xe5\x87\x89\x08\xfd\x94\x28\x8d\xd2\xb7\xf2\xbc\x94\x3a\x73\xfb\x64\x10\x35\xe5\x1e\xe5\x0e\x33\x4c\xe7\x9f\x62\x84\xa5\x2d\xee\x80\x29\x90\x39\xe7\x8c\xaf\xa0\x8e\xfa\x20\xf1\xba\x20\x87\x4c\x0a\x8d\x91\xa9\xc8\x81\xac\x08\xe3\x4a\x43\x28\xb4\xf2\x66\x3e\xa6\x5f\x90\x15\xd4\x4f\xe5\xc3\xae\x05\x62\xa7\x7d\x1f\xfe\x9a\x88\x90\x24\xb0\x36\xb7\x5d\x98\x98\x0b\x41\x80\x29\xd5\x40\xc7\x08\x51\x2e\x25\x72\x0d\x4a\x13\x9d\x2b\x10\x4b\x3b\x5a\x20\x37\xeb\xd7\x44\x02\xd1\x1a\xd3\x4c\x43\x50\x16\xf0\x66\x4c\xa1\x5c\x97\x6d\x09\xf3\x6a\xea\x86\xfd\xf9\x22\x2b\x74\x9c\x7a\xa4\x0a\xe3\x10\xc0\x2f\xbf\x5e\xbd\x2a\xc1\xdd\xe0\x92\x71\x04\x62\x6e\xd6\x42\x09\x3a\x26\x1a\x22\x89\x44\xa3\x82\x28\x11\x2a\x97\x05\x66\x93\xdf\x82\xc1\x5d\x71\xaa\x38\x9b\x89\xcc\xca\xaf\x98\xb4\x63\xa2\xe2\x4e\xd9\x91\x90\xa8\x73\xc9\x77\x73\xd5\xf8\xd9\x52\x48\x68\x1b\x06\x2c\xe8\x5e\x01\x9b\x55\x7c\xbd\x04\xf9\x4a\xc7\x57\xc0\xde\xbc\xa9\x89\xcf\xd8\x12\xda\x15\xc5\x2f\xec\x57\x4f\x3f\x78\x46\x0a\x04\x01\x34\xa5\x59\x81\x25\x1f\x95\x25\x2c\xc2\x36\x3b\x87\x5e\xe7\xaa\x9a\x0d\x25\x92\xfb\xea\xad\xb4\x6c\xf1\x9f\xfd\xbb\xbd\xda\xd7\x8c\x35\xc7\x9e\x6e\x8a\x6c\x52\x01\x81\x15\x53\x1a\x72\x99\x18\xed\x18\xba\xc2\x28\xb5\x09\x2c\x5d\x53\x2b\x47\x9e\x5a\x3e\x94\x5e\x56\x6d\xa1\x60\xe3\x29\xe4\xb4\xfd\x1f\x1f\xff\xfe\xde\x53\x5a\x32\xbe\x62\xcb\xc7\xf6\x53\x2e\x93\x29\xbc\x6e\x3b\xff\x96\xcb\xc4\xe9\xfc\xd2\xfd\xd5\x5b\x93\x24\xc7\xf3\xd2\xe0\x53\xa8\xca\x0c\xe3\x11\x53\xfb\xf7\x48\xea\x39\x94\x8f\x53\xd8\x07\xb0\xed\x74\xae\x4e\x67\xe2\x8d\xf2\x41\xa2\x42\xdd\x36\x84\xf5\xd1\x38\xd4\x19\x81\x14\x75\x2c\xa8\xd1\x8b\xc4\x48\x70\x8e\x91\x86\x3c\x13\xbc\x54\x11\x24\x42\xa9\x9d\x63\x56\x14\xc1\xb1\x93\x94\xf4\x01\x70\xdc\xc0\x7f\x61\xf8\x51\x44\xf7\xa8\xdb\xed\xf6\x86\x71\x2a\x36\x5e\x22\x22\x62\x16\x78\xe6\x18\x8b\x48\x24\x10\x04\x01\x94\x97\x8c\xd3\x81\xbf\x80\xb3\x51\xe6\xba\x71\x60\x6a\x1e\xcd\x53\x07\xde\xc0\xe1\xf2\x58\x28\x0d\x6f\xc0\xf1\x8b\xa3\x67\x92\x6e\xa9\x7d\x92\x31\xa7\x53\x9c\x95\xca\x2a\x82\xa7\xa8\x14\x59\x61\x13\x2d\xae\x91\xeb\xda\x03\xcd\xa6\x52\xb5\x82\x00\xac\xf5\x32\x22\x15\x16\x24\x9e\x49\xfe\x2a\x57\x34\x0e\x6d\xc9\x82\x00\x78\x9e\x24\x3b\x0f\x2e\x4e\xcc\x55\xe5\x9b\x7b\xe4\x9e\x4d\xc9\xe0\xa7\x20\x00\x93\x0b\x19\x7d\xd3\xdd\x4a\xe3\x19\x45\xce\xd6\xf1\x4c\x3a\xb6\x5b\xd1\xb9\x6a\xba\xfa\x1e\x37\xa4\x7f\xc4\x0e\xe9\x21\x3f\xa4\xcf\x30\xb4\x29\xf2\x4b\xfc\x8a\x94\xba\xc1\xce\x0e\x3c\xc3\x8d\xe7\x69\x88\xf2\x25\x76\x45\x8a\x5c\xb2\xb3\xaa\xbe\xe3\xba\xb1\xf6\x1c\x7a\xe3\xce\x33\xdc\x51\x4a\xf1\x2c\x73\x2e\xf4\x63\xfb\x29\x21\x8f\x22\xd7\x53\x68\x69\x91\x5d\xdb\x9c\xb6\x75\x0e\x46\xd6\x14\x6a\x0e\xe7\xb6\x71\x31\x85\x96\x7d\x33\xf3\x2c\x45\xbb\x6a\xd4\xed\x76\xcf\xa1\xea\x02\x2f\x88\x39\x91\x32\xc7\xed\x33\x78\x54\x1e\x45\xa8\x9e\xd5\xde\x17\x21\x2a\x79\xd4\x98\xca\xf7\xef\x40\x55\x07\x8e\x3d\x58\xf0\xe7\x3f\xc3\xd1\xec\xbe\x1b\xfb\x3e\xfc\x27\x91\xf7\x60\xcb\x57\x89\x6b\x26\x72\xb5\x0b\x43\x29\x53\xca\xc4\x64\xa2\x80\x0a\x8e\xe5\x9a\xaf\x8b\x09\x47\x18\x4b\x32\x98\x43\xf7\x10\xa0\xb9\x2b\x1b\x31\xe3\x44\x28\x69\xf0\xdd\x8f\x12\x67\xdb\xa6\xbc\xbd\x95\x2c\x45\xf8\x29\x00\xc7\x69\x2e\x3e\xa2\x30\x04\x35\xb3\x33\x85\xfa\x53\x61\x8b\x76\x19\x3a\x4f\x05\xb6\xce\xb9\xa9\xca\xbb\x9d\x23\x10\xdb\x9d\x7a\xdf\x66\x19\x72\x0a\x84\x3f\xda\xfb\xb1\xd6\x2d\xe3\x5a\x80\xc8\xcd\x3d\x1b\x91\x04\x22\x91\x24\x45\x8a\x53\x2e\x35\x0a\x8e\x44\x9a\x0a\x0e\x01\xb8\xbd\xab\x13\x21\xb6\xa1\xc9\xc6\xd6\x0e\xcd\x73\x42\xf7\x87\x26\xda\xd7\xd9\x01\xb1\xdb\xdb\x33\xca\x9e\xbd\x4e\x1b\xe6\xac\xc6\xcd\x76\x1a\x3d\x30\xd7\xce\x5e\x87\x3a\x6b\xe0\x2f\xf8\xbc\xe9\x7d\xe1\x36\xea\xe9\x2c\x57\x71\xfb\x00\x68\xe7\xea\xd8\x36\x77\x1a\x25\xd1\x68\xdb\x2e\xd6\x16\xc8\x35\x93\x78\x64\x12\x20\xdc\xa4\x54\xae\x44\x4e\x51\x56\xf9\x06\x35\x47\xc3\x96\xb4\x7b\x26\xb3\x1f\x79\xf7\xdc\xe9\x2b\x0f\x8c\xcd\xd7\x04\x47\x00\x80\x83\x43\x60\x1d\x75\xcf\x53\x0d\x31\x26\x24\x53\x48\x21\x80\xe2\xa3\x5c\xbb\xe3\xe5\x9c\x3d\xb4\x3b\x6e\xf9\x7e\xc8\xa3\x9a\x2f\xc3\xa6\xb5\x58\x01\xfb\x4d\x00\xce\x4c\x4b\x53\xd8\xb7\x1c\x78\x73\xea\x08\x9a\x10\xdc\x9a\xef\x10\x34\x97\x02\xcc\x34\x9d\xdb\xc2\xbb\xa8\xce\xff\xe5\x84\x24\xba\x5f\x49\x91\x73\x3a\x35\x79\x58\xfb\x88\x2d\x59\x13\x4d\xa4\xe5\xda\xb9\x82\x1d\xb9\xed\x02\x4e\x21\x32\xc6\xb9\x82\xa2\xaf\x64\xeb\x7b\xa8\x3b\x62\xf6\x2d\x14\x92\xa2\x74\x25\xa1\x2c\x57\x53\x18\x66\x0f\x57\xff\xaa\x3a\x86\xb6\x0b\xf1\x22\xd4\x4c\xe2\xfc\x08\x51\x14\xd9\x2f\x06\x6f\xc0\x99\xf9\x86\xe0\x8f\xd8\xd4\x9b\x6d\x7e\x0c\x84\x13\xbd\x16\xa8\x3f\xd5\x95\xe3\x29\xa3\x34\x41\x03\x78\xc7\xde\x1c\x46\x63\xff\xe6\x91\xda\x17\x09\x65\x93\x65\xb7\x66\x0b\x98\x28\x7c\x61\x41\xdd\xaf\x69\x19\x07\x70\xcd\x96\x99\xd5\x79\xd9\x21\xb1\xc3\xb2\x65\x75\x51\x7e\xda\xa5\xb9\xb4\x89\x57\xdb\x2d\x1d\xec\x1c\x5a\xca\x24\x82\x54\xb5\x3a\x5e\x9c\xa7\x84\xb3\xdf\xb1\x6d\xe2\x52\xa7\xd0\x95\x6d\x00\x39\xc7\x57\xf2\x11\x98\x5d\x67\xa6\x55\xc5\xb8\x56\xa9\xc4\x56\x65\x5d\x63\xc8\xc6\x67\xd1\xd6\x57\x6a\xe8\xb4\x14\x37\x24\x12\x9a\x2f\x6e\x15\x7c\x41\x0a\x23\xbd\x9a\x0b\x89\x6c\x15\xcd\x2f\x9b\xbc\x73\xb1\x09\x5a\x83\x6e\x0d\xb2\x30\xb4\xb5\x73\xab\xf4\xb5\x23\x63\x18\x94\xd5\xd1\x9c\xc3\xa0\xfb\x23\xd0\x52\xc2\x57\x78\xb8\x03\x2d\x59\x66\xca\xfe\x48\xb3\x35\xfe\x2f\x6c\xe4\x07\x28\xf9\xab\x21\x1a\x3f\xac\x94\x67\xdd\x74\x0f\xaf\x99\xad\x75\xfb\xef\xe6\xbc\x81\x6f\x35\xfc\x06\x9c\x93\x1b\x79\xd6\x13\x0f\x08\x0f\x8e\xf6\xf3\xe7\xde\x76\x34\x9d\xc3\x98\x62\xb2\xdd\xba\x17\xdf\xf1\x62\x9d\x26\x6d\x67\xa6\xed\x47\x7b\x83\xb9\xe6\x60\x19\x14\xc3\xfb\x29\xdd\x76\xbf\x90\x31\xc5\x3d\x1e\x14\x5d\xd0\x48\x4e\xea\xc2\xac\xca\x44\x60\xbb\xfb\x6d\x83\xef\xc3\x47\x4d\xa4\x06\x02\x3f\xdf\x41\x9e\x51\xa2\x4d\xf4\x12\x60\xe2\xa3\x8d\x62\xf5\x8f\x1f\x42\x22\x15\x2c\x85\xdc\x10\x49\x21\xe7\x9a\x25\x66\xfe\xd1\x76\x95\xaa\xd4\x4f\xa1\xbe\x33\xb7\xd8\x9a\x24\xed\xa3\x22\xf0\x75\xbb\xe5\x35\x4d\xde\xea\x78\x48\xa2\xf8\x98\xd0\x46\xac\x5a\x6e\x00\xef\x6d\x09\xd0\x7e\xdd\xd6\x31\x53\x1d\x8f\x68\x2d\xdb\xad\x3d\x67\x68\x75\x8c\x5d\x7b\x8d\x92\xac\x5e\x3e\xdb\x3b\x56\x2f\xf1\xd8\x25\xd3\x75\x22\x50\x91\x47\x4a\xb5\x0b\xbf\x6a\x9d\x37\x78\xef\xbb\x55\xeb\x4f\xad\xda\x50\xbb\xe3\xbd\xdb\x47\x70\x12\xc9\x1e\xeb\x96\x39\x65\xad\x23\xf1\x84\xd2\x6b\x73\x7e\xda\xce\x89\x93\x7e\xe8\x1d\x9d\x5a\xd9\xc5\x7d\xfd\xa2\x96\x19\xa7\xf8\xf0\x9c\x8a\x19\x6d\x75\x3c\x95\x87\x45\xe3\xa2\x3d\xaa\x0b\xb0\x8a\xcc\x3a\xef\x61\x28\x38\x4a\x28\x8c\x88\xfd\xa4\xc2\x3d\x48\x42\x5e\x88\x1a\xa5\xc8\x62\x57\xdb\x73\xa3\xf0\x6e\xa7\xee\x7b\xdd\x2a\x93\x5c\x31\x15\x03\x81\x0d\x86\xca\xb6\x15\xa0\xf4\x77\xdb\xea\x29\x5a\x3a\x6f\x3f\xdc\x35\xda\x3a\xf5\x89\x68\x5b\xee\xf5\xef\x92\x4e\x35\x4d\x4e\xfe\x10\x6a\xb3\xd9\x78\x2b\x21\x56\x49\xf1\x13\xa8\xba\xab\xe2\x93\x8c\x79\x9f\x95\x03\x44\x3d\xf2\x08\x28\x2e\x51\xce\x1b\xec\xcb\x56\xcb\xcc\x2f\x7e\xa2\x33\xf3\x8b\xdf\x1d\xfe\x4f\x00\x00\x00\xff\xff\x83\x3a\x76\x4a\x88\x28\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0x37, 0x2, 0xd4, 0xbf, 0x55, 0x95, 0x76, 0xbc, 0xf1, 0xa4, 0x9e, 0x51, 0x37, 0xc9, 0x81, 0x45, 0x31, 0x16, 0x8e, 0xee, 0x2e, 0xc3, 0x4c, 0x2, 0xc2, 0xc5, 0x18, 0xc7, 0x7d, 0x4, 0xbb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
